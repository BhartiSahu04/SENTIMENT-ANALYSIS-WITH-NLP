import nltk
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import numpy as np
import seaborn as sns
from nltk.sentiment import SentimentIntensityAnalyzer

# Download required NLTK data
nltk.download('vader_lexicon')

# Sample Data
data = {'text': ["I love this product!", "This is the worst experience ever.", "It is okay, not the best.", "Absolutely fantastic!", "I hate it."],
        'sentiment': ['positive', 'negative', 'neutral', 'positive', 'negative']}
df = pd.DataFrame(data)

# Sentiment Analysis using VADER (Lexicon-based)
sia = SentimentIntensityAnalyzer()
df['vader_score'] = df['text'].apply(lambda x: sia.polarity_scores(x)['compound'])
df['vader_sentiment'] = df['vader_score'].apply(lambda x: 'positive' if x > 0.05 else ('negative' if x < -0.05 else 'neutral'))

# Display VADER results
print("VADER Sentiment Analysis Results:")
print(df[['text', 'vader_score', 'vader_sentiment']])

# Visualizing VADER Sentiment Analysis
plt.figure(figsize=(8, 5))
sns.barplot(x=df['vader_sentiment'].value_counts().index, y=df['vader_sentiment'].value_counts(), palette='coolwarm')
plt.title("VADER Sentiment Distribution")
plt.xlabel("Sentiment")
plt.ylabel("Count")
plt.show()

# Machine Learning Approach - Naïve Bayes
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(df['text'])
y = df['sentiment']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
classifier = MultinomialNB()
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)

# Display Machine Learning results
print("\nNaïve Bayes Sentiment Analysis:")
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Confusion Matrix Visualization
cm = confusion_matrix(y_test, y_pred, labels=['positive', 'neutral', 'negative'])
plt.figure(figsize=(6, 5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['positive', 'neutral', 'negative'], yticklabels=['positive', 'neutral', 'negative'])
plt.title("Confusion Matrix - Naïve Bayes Sentiment Analysis")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.show()
